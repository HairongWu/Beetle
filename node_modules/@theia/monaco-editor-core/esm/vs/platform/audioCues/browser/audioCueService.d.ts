import { Disposable, IDisposable } from '../../../base/common/lifecycle';
import { IAccessibilityService } from '../../accessibility/common/accessibility';
import { IConfigurationService } from '../../configuration/common/configuration';
import { Event } from '../../../base/common/event';
import { ITelemetryService } from '../../telemetry/common/telemetry';
export declare const IAudioCueService: import("../../instantiation/common/instantiation").ServiceIdentifier<IAudioCueService>;
export interface IAudioCueService {
    readonly _serviceBrand: undefined;
    playAudioCue(cue: AudioCue, options?: IAudioCueOptions): Promise<void>;
    playAudioCues(cues: (AudioCue | {
        cue: AudioCue;
        source: string;
    })[]): Promise<void>;
    isEnabled(cue: AudioCue): boolean;
    onEnabledChanged(cue: AudioCue): Event<void>;
    playSound(cue: Sound, allowManyInParallel?: boolean): Promise<void>;
    playAudioCueLoop(cue: AudioCue, milliseconds: number): IDisposable;
}
export interface IAudioCueOptions {
    allowManyInParallel?: boolean;
    source?: string;
}
export declare class AudioCueService extends Disposable implements IAudioCueService {
    private readonly configurationService;
    private readonly accessibilityService;
    private readonly telemetryService;
    readonly _serviceBrand: undefined;
    private readonly sounds;
    private readonly screenReaderAttached;
    private readonly sentTelemetry;
    constructor(configurationService: IConfigurationService, accessibilityService: IAccessibilityService, telemetryService: ITelemetryService);
    playAudioCue(cue: AudioCue, options?: IAudioCueOptions): Promise<void>;
    playAudioCues(cues: (AudioCue | {
        cue: AudioCue;
        source: string;
    })[]): Promise<void>;
    private sendAudioCueTelemetry;
    private getVolumeInPercent;
    private readonly playingSounds;
    playSound(sound: Sound, allowManyInParallel?: boolean): Promise<void>;
    playAudioCueLoop(cue: AudioCue, milliseconds: number): IDisposable;
    private readonly obsoleteAudioCuesEnabled;
    private readonly isEnabledCache;
    isEnabled(cue: AudioCue): boolean;
    onEnabledChanged(cue: AudioCue): Event<void>;
}
/**
 * Corresponds to the audio files in ./media.
*/
export declare class Sound {
    readonly fileName: string;
    private static register;
    static readonly error: Sound;
    static readonly warning: Sound;
    static readonly foldedArea: Sound;
    static readonly break: Sound;
    static readonly quickFixes: Sound;
    static readonly taskCompleted: Sound;
    static readonly taskFailed: Sound;
    static readonly terminalBell: Sound;
    static readonly diffLineInserted: Sound;
    static readonly diffLineDeleted: Sound;
    static readonly diffLineModified: Sound;
    static readonly chatRequestSent: Sound;
    static readonly chatResponsePending: Sound;
    static readonly chatResponseReceived1: Sound;
    static readonly chatResponseReceived2: Sound;
    static readonly chatResponseReceived3: Sound;
    static readonly chatResponseReceived4: Sound;
    private constructor();
}
export declare class SoundSource {
    readonly randomOneOf: Sound[];
    constructor(randomOneOf: Sound[]);
    getSound(deterministic?: boolean): Sound;
}
export declare class AudioCue {
    readonly sound: SoundSource;
    readonly name: string;
    readonly settingsKey: string;
    private static _audioCues;
    private static register;
    static get allAudioCues(): AudioCue[];
    static readonly error: AudioCue;
    static readonly warning: AudioCue;
    static readonly foldedArea: AudioCue;
    static readonly break: AudioCue;
    static readonly inlineSuggestion: AudioCue;
    static readonly terminalQuickFix: AudioCue;
    static readonly onDebugBreak: AudioCue;
    static readonly noInlayHints: AudioCue;
    static readonly taskCompleted: AudioCue;
    static readonly taskFailed: AudioCue;
    static readonly terminalCommandFailed: AudioCue;
    static readonly terminalBell: AudioCue;
    static readonly notebookCellCompleted: AudioCue;
    static readonly notebookCellFailed: AudioCue;
    static readonly diffLineInserted: AudioCue;
    static readonly diffLineDeleted: AudioCue;
    static readonly diffLineModified: AudioCue;
    static readonly chatRequestSent: AudioCue;
    static readonly chatResponseReceived: AudioCue;
    static readonly chatResponsePending: AudioCue;
    private constructor();
}
//# sourceMappingURL=audioCueService.d.ts.map