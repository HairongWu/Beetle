import { Disposable } from '../../../../base/common/lifecycle';
import { ICodeEditor } from '../../../browser/editorBrowser';
import { Range } from '../../../common/core/range';
import { IEditorContribution } from '../../../common/editorCommon';
import { ILanguageService } from '../../../common/languages/language';
import { HoverStartMode, HoverStartSource } from './hoverOperation';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
import { IOpenerService } from '../../../../platform/opener/common/opener';
import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';
import './hover.css';
export declare class ModesHoverController extends Disposable implements IEditorContribution {
    private readonly _editor;
    private readonly _instantiationService;
    private readonly _openerService;
    private readonly _languageService;
    private readonly _keybindingService;
    static readonly ID = "editor.contrib.hover";
    private readonly _toUnhook;
    private _contentWidget;
    getWidgetContent(): string | undefined;
    private _glyphWidget;
    private _isMouseDown;
    private _hoverClicked;
    private _isHoverEnabled;
    private _isHoverSticky;
    private _hidingDelay;
    private _hoverActivatedByColorDecoratorClick;
    private _reactToEditorMouseMoveRunner;
    private _mouseMoveEvent;
    static get(editor: ICodeEditor): ModesHoverController | null;
    constructor(_editor: ICodeEditor, _instantiationService: IInstantiationService, _openerService: IOpenerService, _languageService: ILanguageService, _keybindingService: IKeybindingService);
    private _hookEvents;
    private _unhookEvents;
    private _onEditorScrollChanged;
    private _onEditorMouseDown;
    private _onEditorMouseUp;
    private _onEditorMouseLeave;
    private _isMouseOverWidget;
    private _onEditorMouseMove;
    private _reactToEditorMouseMove;
    private _onKeyDown;
    private _hideWidgets;
    private _getOrCreateContentWidget;
    showContentHover(range: Range, mode: HoverStartMode, source: HoverStartSource, focus: boolean, activatedByColorDecoratorClick?: boolean): void;
    focus(): void;
    scrollUp(): void;
    scrollDown(): void;
    scrollLeft(): void;
    scrollRight(): void;
    pageUp(): void;
    pageDown(): void;
    goToTop(): void;
    goToBottom(): void;
    get isColorPickerVisible(): boolean | undefined;
    get isHoverVisible(): boolean | undefined;
    dispose(): void;
}
//# sourceMappingURL=hover.d.ts.map