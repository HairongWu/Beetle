import { Disposable } from '../../../../base/common/lifecycle';
import { IObservable } from '../../../../base/common/observable';
import './ghostText.css';
import { ICodeEditor } from '../../../browser/editorBrowser';
import { ILanguageService } from '../../../common/languages/language';
import { ITextModel } from '../../../common/model';
import { GhostText, GhostTextReplacement } from './ghostText';
export declare const GHOST_TEXT_DESCRIPTION = "ghost-text";
export interface IGhostTextWidgetModel {
    readonly targetTextModel: IObservable<ITextModel | undefined>;
    readonly ghostText: IObservable<GhostText | GhostTextReplacement | undefined>;
    readonly minReservedLineCount: IObservable<number>;
}
export declare class GhostTextWidget extends Disposable {
    private readonly editor;
    private readonly model;
    private readonly languageService;
    private readonly isDisposed;
    private readonly currentTextModel;
    constructor(editor: ICodeEditor, model: IGhostTextWidgetModel, languageService: ILanguageService);
    private readonly uiState;
    private readonly decorations;
    private readonly additionalLinesWidget;
    ownsViewZone(viewZoneId: string): boolean;
}
//# sourceMappingURL=ghostTextWidget.d.ts.map