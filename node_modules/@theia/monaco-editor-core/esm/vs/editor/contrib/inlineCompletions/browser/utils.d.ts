import { IDisposable } from '../../../../base/common/lifecycle';
import { IObservable } from '../../../../base/common/observable';
import { ICodeEditor } from '../../../browser/editorBrowser';
import { Position } from '../../../common/core/position';
import { IRange, Range } from '../../../common/core/range';
import { IModelDeltaDecoration } from '../../../common/model';
export declare function applyEdits(text: string, edits: {
    range: IRange;
    text: string;
}[]): string;
export declare function getReadonlyEmptyArray<T>(): readonly T[];
export declare class ColumnRange {
    readonly startColumn: number;
    readonly endColumnExclusive: number;
    constructor(startColumn: number, endColumnExclusive: number);
    toRange(lineNumber: number): Range;
    equals(other: ColumnRange): boolean;
}
export declare function applyObservableDecorations(editor: ICodeEditor, decorations: IObservable<IModelDeltaDecoration[]>): IDisposable;
export declare function addPositions(pos1: Position, pos2: Position): Position;
export declare function lengthOfText(text: string): Position;
//# sourceMappingURL=utils.d.ts.map