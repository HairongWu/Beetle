import { Disposable } from '../../../../base/common/lifecycle';
import { ICodeEditor } from '../../../browser/editorBrowser';
import { Range } from '../../../common/core/range';
import { ILanguageFeatureDebounceService } from '../../../common/services/languageFeatureDebounce';
import { ILanguageFeaturesService } from '../../../common/services/languageFeatures';
import { InlineCompletionsModel } from './inlineCompletionsModel';
import { IAudioCueService } from '../../../../platform/audioCues/browser/audioCueService';
import { ICommandService } from '../../../../platform/commands/common/commands';
import { IConfigurationService } from '../../../../platform/configuration/common/configuration';
import { IContextKeyService } from '../../../../platform/contextkey/common/contextkey';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding';
export declare class InlineCompletionsController extends Disposable {
    readonly editor: ICodeEditor;
    private readonly instantiationService;
    private readonly contextKeyService;
    private readonly configurationService;
    private readonly commandService;
    private readonly debounceService;
    private readonly languageFeaturesService;
    private readonly audioCueService;
    private readonly _keybindingService;
    static ID: string;
    static get(editor: ICodeEditor): InlineCompletionsController | null;
    readonly model: import("../../../../base/common/observable").ISettableObservable<InlineCompletionsModel | undefined, void> & import("../../../../base/common/lifecycle").IDisposable;
    private readonly textModelVersionId;
    private readonly cursorPosition;
    private readonly suggestWidgetAdaptor;
    private readonly _enabled;
    private ghostTextWidget;
    private readonly _debounceValue;
    constructor(editor: ICodeEditor, instantiationService: IInstantiationService, contextKeyService: IContextKeyService, configurationService: IConfigurationService, commandService: ICommandService, debounceService: ILanguageFeatureDebounceService, languageFeaturesService: ILanguageFeaturesService, audioCueService: IAudioCueService, _keybindingService: IKeybindingService);
    private provideScreenReaderUpdate;
    /**
     * Copies over the relevant state from the text model to observables.
     * This solves all kind of eventing issues, as we make sure we always operate on the latest state,
     * regardless of who calls into us.
     */
    private updateObservables;
    shouldShowHoverAt(range: Range): boolean;
    shouldShowHoverAtViewZone(viewZoneId: string): boolean;
    hide(): void;
}
//# sourceMappingURL=inlineCompletionsController.d.ts.map