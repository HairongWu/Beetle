import { CancellationToken } from '../../../../base/common/cancellation';
import { Disposable, IDisposable } from '../../../../base/common/lifecycle';
import { ICodeEditor } from '../../../browser/editorBrowser';
import { Position } from '../../../common/core/position';
import { IEditorContribution } from '../../../common/editorCommon';
import { ITextModel } from '../../../common/model';
import { DocumentHighlight, DocumentHighlightProvider } from '../../../common/languages';
import { IContextKeyService } from '../../../../platform/contextkey/common/contextkey';
import { LanguageFeatureRegistry } from '../../../common/languageFeatureRegistry';
import { ILanguageFeaturesService } from '../../../common/services/languageFeatures';
export declare function getOccurrencesAtPosition(registry: LanguageFeatureRegistry<DocumentHighlightProvider>, model: ITextModel, position: Position, token: CancellationToken): Promise<DocumentHighlight[] | null | undefined>;
export declare class WordHighlighterContribution extends Disposable implements IEditorContribution {
    static readonly ID = "editor.contrib.wordHighlighter";
    static get(editor: ICodeEditor): WordHighlighterContribution | null;
    private wordHighlighter;
    private linkedContributions;
    constructor(editor: ICodeEditor, contextKeyService: IContextKeyService, languageFeaturesService: ILanguageFeaturesService);
    saveViewState(): boolean;
    moveNext(): void;
    moveBack(): void;
    restoreViewState(state: boolean | undefined): void;
    stopHighlighting(): void;
    linkWordHighlighters(editor: ICodeEditor): IDisposable;
    dispose(): void;
}
//# sourceMappingURL=wordHighlighter.d.ts.map