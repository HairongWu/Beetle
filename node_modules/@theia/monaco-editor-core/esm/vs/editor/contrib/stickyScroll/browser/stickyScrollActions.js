"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectEditor = exports.GoToStickyScrollLine = exports.SelectPreviousStickyScrollLine = exports.SelectNextStickyScrollLine = exports.FocusStickyScroll = exports.ToggleStickyScroll = void 0;
const editorExtensions_1 = require("../../../browser/editorExtensions");
const nls_1 = require("../../../../nls");
const actionCommonCategories_1 = require("../../../../platform/action/common/actionCommonCategories");
const actions_1 = require("../../../../platform/actions/common/actions");
const configuration_1 = require("../../../../platform/configuration/common/configuration");
const contextkey_1 = require("../../../../platform/contextkey/common/contextkey");
const editorContextKeys_1 = require("../../../common/editorContextKeys");
const stickyScrollController_1 = require("./stickyScrollController");
class ToggleStickyScroll extends actions_1.Action2 {
    constructor() {
        super({
            id: 'editor.action.toggleStickyScroll',
            title: {
                value: (0, nls_1.localize)('toggleStickyScroll', "Toggle Sticky Scroll"),
                mnemonicTitle: (0, nls_1.localize)({ key: 'mitoggleStickyScroll', comment: ['&& denotes a mnemonic'] }, "&&Toggle Sticky Scroll"),
                original: 'Toggle Sticky Scroll',
            },
            category: actionCommonCategories_1.Categories.View,
            toggled: {
                condition: contextkey_1.ContextKeyExpr.equals('config.editor.stickyScroll.enabled', true),
                title: (0, nls_1.localize)('stickyScroll', "Sticky Scroll"),
                mnemonicTitle: (0, nls_1.localize)({ key: 'miStickyScroll', comment: ['&& denotes a mnemonic'] }, "&&Sticky Scroll"),
            },
            menu: [
                { id: actions_1.MenuId.CommandPalette },
                { id: actions_1.MenuId.MenubarAppearanceMenu, group: '4_editor', order: 3 },
                { id: actions_1.MenuId.StickyScrollContext }
            ]
        });
    }
    run(accessor) {
        return __awaiter(this, void 0, void 0, function* () {
            const configurationService = accessor.get(configuration_1.IConfigurationService);
            const newValue = !configurationService.getValue('editor.stickyScroll.enabled');
            return configurationService.updateValue('editor.stickyScroll.enabled', newValue);
        });
    }
}
exports.ToggleStickyScroll = ToggleStickyScroll;
const weight = 100 /* KeybindingWeight.EditorContrib */;
class FocusStickyScroll extends editorExtensions_1.EditorAction2 {
    constructor() {
        super({
            id: 'editor.action.focusStickyScroll',
            title: {
                value: (0, nls_1.localize)('focusStickyScroll', "Focus Sticky Scroll"),
                mnemonicTitle: (0, nls_1.localize)({ key: 'mifocusStickyScroll', comment: ['&& denotes a mnemonic'] }, "&&Focus Sticky Scroll"),
                original: 'Focus Sticky Scroll',
            },
            precondition: contextkey_1.ContextKeyExpr.and(contextkey_1.ContextKeyExpr.has('config.editor.stickyScroll.enabled'), editorContextKeys_1.EditorContextKeys.stickyScrollVisible),
            menu: [
                { id: actions_1.MenuId.CommandPalette },
            ]
        });
    }
    runEditorCommand(_accessor, editor) {
        var _a;
        (_a = stickyScrollController_1.StickyScrollController.get(editor)) === null || _a === void 0 ? void 0 : _a.focus();
    }
}
exports.FocusStickyScroll = FocusStickyScroll;
class SelectNextStickyScrollLine extends editorExtensions_1.EditorAction2 {
    constructor() {
        super({
            id: 'editor.action.selectNextStickyScrollLine',
            title: {
                value: (0, nls_1.localize)('selectNextStickyScrollLine.title', "Select next sticky scroll line"),
                original: 'Select next sticky scroll line'
            },
            precondition: editorContextKeys_1.EditorContextKeys.stickyScrollFocused.isEqualTo(true),
            keybinding: {
                weight,
                primary: 18 /* KeyCode.DownArrow */
            }
        });
    }
    runEditorCommand(_accessor, editor) {
        var _a;
        (_a = stickyScrollController_1.StickyScrollController.get(editor)) === null || _a === void 0 ? void 0 : _a.focusNext();
    }
}
exports.SelectNextStickyScrollLine = SelectNextStickyScrollLine;
class SelectPreviousStickyScrollLine extends editorExtensions_1.EditorAction2 {
    constructor() {
        super({
            id: 'editor.action.selectPreviousStickyScrollLine',
            title: {
                value: (0, nls_1.localize)('selectPreviousStickyScrollLine.title', "Select previous sticky scroll line"),
                original: 'Select previous sticky scroll line'
            },
            precondition: editorContextKeys_1.EditorContextKeys.stickyScrollFocused.isEqualTo(true),
            keybinding: {
                weight,
                primary: 16 /* KeyCode.UpArrow */
            }
        });
    }
    runEditorCommand(_accessor, editor) {
        var _a;
        (_a = stickyScrollController_1.StickyScrollController.get(editor)) === null || _a === void 0 ? void 0 : _a.focusPrevious();
    }
}
exports.SelectPreviousStickyScrollLine = SelectPreviousStickyScrollLine;
class GoToStickyScrollLine extends editorExtensions_1.EditorAction2 {
    constructor() {
        super({
            id: 'editor.action.goToFocusedStickyScrollLine',
            title: {
                value: (0, nls_1.localize)('goToFocusedStickyScrollLine.title', "Go to focused sticky scroll line"),
                original: 'Go to focused sticky scroll line'
            },
            precondition: editorContextKeys_1.EditorContextKeys.stickyScrollFocused.isEqualTo(true),
            keybinding: {
                weight,
                primary: 3 /* KeyCode.Enter */
            }
        });
    }
    runEditorCommand(_accessor, editor) {
        var _a;
        (_a = stickyScrollController_1.StickyScrollController.get(editor)) === null || _a === void 0 ? void 0 : _a.goToFocused();
    }
}
exports.GoToStickyScrollLine = GoToStickyScrollLine;
class SelectEditor extends editorExtensions_1.EditorAction2 {
    constructor() {
        super({
            id: 'editor.action.selectEditor',
            title: {
                value: (0, nls_1.localize)('selectEditor.title', "Select Editor"),
                original: 'Select Editor'
            },
            precondition: editorContextKeys_1.EditorContextKeys.stickyScrollFocused.isEqualTo(true),
            keybinding: {
                weight,
                primary: 9 /* KeyCode.Escape */
            }
        });
    }
    runEditorCommand(_accessor, editor) {
        var _a;
        (_a = stickyScrollController_1.StickyScrollController.get(editor)) === null || _a === void 0 ? void 0 : _a.selectEditor();
    }
}
exports.SelectEditor = SelectEditor;
//# sourceMappingURL=stickyScrollActions.js.map