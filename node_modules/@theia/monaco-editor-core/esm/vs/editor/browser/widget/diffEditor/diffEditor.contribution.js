"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.findFocusedDiffEditor = exports.AccessibleDiffViewerPrev = exports.AccessibleDiffViewerNext = exports.ShowAllUnchangedRegions = exports.CollapseAllUnchangedRegions = exports.ExitCompareMove = exports.SwitchSide = exports.ToggleUseInlineViewWhenSpaceIsLimited = exports.ToggleShowMovedCodeBlocks = exports.ToggleCollapseUnchangedRegions = void 0;
const dom_1 = require("../../../../base/browser/dom");
const codicons_1 = require("../../../../base/common/codicons");
const editorExtensions_1 = require("../../editorExtensions");
const codeEditorService_1 = require("../../services/codeEditorService");
const diffEditorWidget_1 = require("./diffEditorWidget");
const editorContextKeys_1 = require("../../../common/editorContextKeys");
const nls_1 = require("../../../../nls");
const actions_1 = require("../../../../platform/actions/common/actions");
const commands_1 = require("../../../../platform/commands/common/commands");
const configuration_1 = require("../../../../platform/configuration/common/configuration");
const contextkey_1 = require("../../../../platform/contextkey/common/contextkey");
class ToggleCollapseUnchangedRegions extends actions_1.Action2 {
    constructor() {
        super({
            id: 'diffEditor.toggleCollapseUnchangedRegions',
            title: { value: (0, nls_1.localize)('toggleCollapseUnchangedRegions', "Toggle Collapse Unchanged Regions"), original: 'Toggle Collapse Unchanged Regions' },
            icon: codicons_1.Codicon.map,
            toggled: contextkey_1.ContextKeyExpr.has('config.diffEditor.hideUnchangedRegions.enabled'),
            precondition: contextkey_1.ContextKeyExpr.has('isInDiffEditor'),
            menu: {
                when: contextkey_1.ContextKeyExpr.has('isInDiffEditor'),
                id: actions_1.MenuId.EditorTitle,
                order: 22,
                group: 'navigation',
            },
        });
    }
    run(accessor, ...args) {
        const configurationService = accessor.get(configuration_1.IConfigurationService);
        const newValue = !configurationService.getValue('diffEditor.hideUnchangedRegions.enabled');
        configurationService.updateValue('diffEditor.hideUnchangedRegions.enabled', newValue);
    }
}
exports.ToggleCollapseUnchangedRegions = ToggleCollapseUnchangedRegions;
(0, actions_1.registerAction2)(ToggleCollapseUnchangedRegions);
class ToggleShowMovedCodeBlocks extends actions_1.Action2 {
    constructor() {
        super({
            id: 'diffEditor.toggleShowMovedCodeBlocks',
            title: { value: (0, nls_1.localize)('toggleShowMovedCodeBlocks', "Toggle Show Moved Code Blocks"), original: 'Toggle Show Moved Code Blocks' },
            precondition: contextkey_1.ContextKeyExpr.has('isInDiffEditor'),
        });
    }
    run(accessor, ...args) {
        const configurationService = accessor.get(configuration_1.IConfigurationService);
        const newValue = !configurationService.getValue('diffEditor.experimental.showMoves');
        configurationService.updateValue('diffEditor.experimental.showMoves', newValue);
    }
}
exports.ToggleShowMovedCodeBlocks = ToggleShowMovedCodeBlocks;
(0, actions_1.registerAction2)(ToggleShowMovedCodeBlocks);
class ToggleUseInlineViewWhenSpaceIsLimited extends actions_1.Action2 {
    constructor() {
        super({
            id: 'diffEditor.toggleUseInlineViewWhenSpaceIsLimited',
            title: { value: (0, nls_1.localize)('toggleUseInlineViewWhenSpaceIsLimited', "Toggle Use Inline View When Space Is Limited"), original: 'Toggle Use Inline View When Space Is Limited' },
            precondition: contextkey_1.ContextKeyExpr.has('isInDiffEditor'),
        });
    }
    run(accessor, ...args) {
        const configurationService = accessor.get(configuration_1.IConfigurationService);
        const newValue = !configurationService.getValue('diffEditor.useInlineViewWhenSpaceIsLimited');
        configurationService.updateValue('diffEditor.useInlineViewWhenSpaceIsLimited', newValue);
    }
}
exports.ToggleUseInlineViewWhenSpaceIsLimited = ToggleUseInlineViewWhenSpaceIsLimited;
(0, actions_1.registerAction2)(ToggleUseInlineViewWhenSpaceIsLimited);
actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {
    command: {
        id: new ToggleUseInlineViewWhenSpaceIsLimited().desc.id,
        title: (0, nls_1.localize)('useInlineViewWhenSpaceIsLimited', "Use Inline View When Space Is Limited"),
        toggled: contextkey_1.ContextKeyExpr.has('config.diffEditor.useInlineViewWhenSpaceIsLimited'),
        precondition: contextkey_1.ContextKeyExpr.has('isInDiffEditor'),
    },
    order: 11,
    group: '1_diff',
    when: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.diffEditorRenderSideBySideInlineBreakpointReached, contextkey_1.ContextKeyExpr.has('isInDiffEditor')),
});
actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {
    command: {
        id: new ToggleShowMovedCodeBlocks().desc.id,
        title: (0, nls_1.localize)('showMoves', "Show Moved Code Blocks"),
        icon: codicons_1.Codicon.move,
        toggled: contextkey_1.ContextKeyEqualsExpr.create('config.diffEditor.experimental.showMoves', true),
        precondition: contextkey_1.ContextKeyExpr.has('isInDiffEditor'),
    },
    order: 10,
    group: '1_diff',
    when: contextkey_1.ContextKeyExpr.has('isInDiffEditor'),
});
const diffEditorCategory = {
    value: (0, nls_1.localize)('diffEditor', 'Diff Editor'),
    original: 'Diff Editor',
};
class SwitchSide extends editorExtensions_1.EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.switchSide',
            title: { value: (0, nls_1.localize)('switchSide', "Switch Side"), original: 'Switch Side' },
            icon: codicons_1.Codicon.arrowSwap,
            precondition: contextkey_1.ContextKeyExpr.has('isInDiffEditor'),
            f1: true,
            category: diffEditorCategory,
        });
    }
    runEditorCommand(accessor, editor, arg) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof diffEditorWidget_1.DiffEditorWidget) {
            if (arg && arg.dryRun) {
                return { destinationSelection: diffEditor.mapToOtherSide().destinationSelection };
            }
            else {
                diffEditor.switchSide();
            }
        }
        return undefined;
    }
}
exports.SwitchSide = SwitchSide;
(0, actions_1.registerAction2)(SwitchSide);
class ExitCompareMove extends editorExtensions_1.EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.exitCompareMove',
            title: { value: (0, nls_1.localize)('exitCompareMove', "Exit Compare Move"), original: 'Exit Compare Move' },
            icon: codicons_1.Codicon.close,
            precondition: editorContextKeys_1.EditorContextKeys.comparingMovedCode,
            f1: false,
            category: diffEditorCategory,
            keybinding: {
                weight: 10000,
                primary: 9 /* KeyCode.Escape */,
            }
        });
    }
    runEditorCommand(accessor, editor, ...args) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof diffEditorWidget_1.DiffEditorWidget) {
            diffEditor.exitCompareMove();
        }
    }
}
exports.ExitCompareMove = ExitCompareMove;
(0, actions_1.registerAction2)(ExitCompareMove);
class CollapseAllUnchangedRegions extends editorExtensions_1.EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.collapseAllUnchangedRegions',
            title: { value: (0, nls_1.localize)('collapseAllUnchangedRegions', "Collapse All Unchanged Regions"), original: 'Collapse All Unchanged Regions' },
            icon: codicons_1.Codicon.fold,
            precondition: contextkey_1.ContextKeyExpr.has('isInDiffEditor'),
            f1: true,
            category: diffEditorCategory,
        });
    }
    runEditorCommand(accessor, editor, ...args) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof diffEditorWidget_1.DiffEditorWidget) {
            diffEditor.collapseAllUnchangedRegions();
        }
    }
}
exports.CollapseAllUnchangedRegions = CollapseAllUnchangedRegions;
(0, actions_1.registerAction2)(CollapseAllUnchangedRegions);
class ShowAllUnchangedRegions extends editorExtensions_1.EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.showAllUnchangedRegions',
            title: { value: (0, nls_1.localize)('showAllUnchangedRegions', "Show All Unchanged Regions"), original: 'Show All Unchanged Regions' },
            icon: codicons_1.Codicon.unfold,
            precondition: contextkey_1.ContextKeyExpr.has('isInDiffEditor'),
            f1: true,
            category: diffEditorCategory,
        });
    }
    runEditorCommand(accessor, editor, ...args) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof diffEditorWidget_1.DiffEditorWidget) {
            diffEditor.showAllUnchangedRegions();
        }
    }
}
exports.ShowAllUnchangedRegions = ShowAllUnchangedRegions;
(0, actions_1.registerAction2)(ShowAllUnchangedRegions);
const accessibleDiffViewerCategory = {
    value: (0, nls_1.localize)('accessibleDiffViewer', 'Accessible Diff Viewer'),
    original: 'Accessible Diff Viewer',
};
class AccessibleDiffViewerNext extends actions_1.Action2 {
    constructor() {
        super({
            id: AccessibleDiffViewerNext.id,
            title: { value: (0, nls_1.localize)('editor.action.accessibleDiffViewer.next', "Go to Next Difference"), original: 'Go to Next Difference' },
            category: accessibleDiffViewerCategory,
            precondition: contextkey_1.ContextKeyExpr.has('isInDiffEditor'),
            keybinding: {
                primary: 65 /* KeyCode.F7 */,
                weight: 100 /* KeybindingWeight.EditorContrib */
            },
            f1: true,
        });
    }
    run(accessor) {
        const diffEditor = findFocusedDiffEditor(accessor);
        diffEditor === null || diffEditor === void 0 ? void 0 : diffEditor.accessibleDiffViewerNext();
    }
}
exports.AccessibleDiffViewerNext = AccessibleDiffViewerNext;
AccessibleDiffViewerNext.id = 'editor.action.accessibleDiffViewer.next';
actions_1.MenuRegistry.appendMenuItem(actions_1.MenuId.EditorTitle, {
    command: {
        id: AccessibleDiffViewerNext.id,
        title: (0, nls_1.localize)('Open Accessible Diff Viewer', "Open Accessible Diff Viewer"),
        precondition: contextkey_1.ContextKeyExpr.has('isInDiffEditor'),
    },
    order: 10,
    group: '2_diff',
    when: contextkey_1.ContextKeyExpr.and(editorContextKeys_1.EditorContextKeys.accessibleDiffViewerVisible.negate(), contextkey_1.ContextKeyExpr.has('isInDiffEditor')),
});
class AccessibleDiffViewerPrev extends actions_1.Action2 {
    constructor() {
        super({
            id: AccessibleDiffViewerPrev.id,
            title: { value: (0, nls_1.localize)('editor.action.accessibleDiffViewer.prev', "Go to Previous Difference"), original: 'Go to Previous Difference' },
            category: accessibleDiffViewerCategory,
            precondition: contextkey_1.ContextKeyExpr.has('isInDiffEditor'),
            keybinding: {
                primary: 1024 /* KeyMod.Shift */ | 65 /* KeyCode.F7 */,
                weight: 100 /* KeybindingWeight.EditorContrib */
            },
            f1: true,
        });
    }
    run(accessor) {
        const diffEditor = findFocusedDiffEditor(accessor);
        diffEditor === null || diffEditor === void 0 ? void 0 : diffEditor.accessibleDiffViewerPrev();
    }
}
exports.AccessibleDiffViewerPrev = AccessibleDiffViewerPrev;
AccessibleDiffViewerPrev.id = 'editor.action.accessibleDiffViewer.prev';
function findFocusedDiffEditor(accessor) {
    var _a;
    const codeEditorService = accessor.get(codeEditorService_1.ICodeEditorService);
    const diffEditors = codeEditorService.listDiffEditors();
    const activeCodeEditor = (_a = codeEditorService.getFocusedCodeEditor()) !== null && _a !== void 0 ? _a : codeEditorService.getActiveCodeEditor();
    if (!activeCodeEditor) {
        return null;
    }
    for (let i = 0, len = diffEditors.length; i < len; i++) {
        const diffEditor = diffEditors[i];
        if (diffEditor.getModifiedEditor().getId() === activeCodeEditor.getId() || diffEditor.getOriginalEditor().getId() === activeCodeEditor.getId()) {
            return diffEditor;
        }
    }
    const activeElement = (0, dom_1.getActiveElement)();
    if (activeElement) {
        for (const d of diffEditors) {
            const container = d.getContainerDomNode();
            if (isElementOrParentOf(container, activeElement)) {
                return d;
            }
        }
    }
    return null;
}
exports.findFocusedDiffEditor = findFocusedDiffEditor;
function isElementOrParentOf(elementOrParent, element) {
    let e = element;
    while (e) {
        if (e === elementOrParent) {
            return true;
        }
        e = e.parentElement;
    }
    return false;
}
commands_1.CommandsRegistry.registerCommandAlias('editor.action.diffReview.next', AccessibleDiffViewerNext.id);
(0, actions_1.registerAction2)(AccessibleDiffViewerNext);
commands_1.CommandsRegistry.registerCommandAlias('editor.action.diffReview.prev', AccessibleDiffViewerPrev.id);
(0, actions_1.registerAction2)(AccessibleDiffViewerPrev);
//# sourceMappingURL=diffEditor.contribution.js.map