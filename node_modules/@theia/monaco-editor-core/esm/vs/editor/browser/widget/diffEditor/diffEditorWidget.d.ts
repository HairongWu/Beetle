import { IBoundarySashes } from '../../../../base/browser/ui/sash/sash';
import { Event } from '../../../../base/common/event';
import './style.css';
import { IEditorConstructionOptions } from '../../config/editorConfiguration';
import { ICodeEditor, IDiffEditor, IDiffEditorConstructionOptions } from '../../editorBrowser';
import { ICodeEditorService } from '../../services/codeEditorService';
import { CodeEditorWidget, ICodeEditorWidgetOptions } from '../codeEditorWidget';
import { IDiffEditorOptions } from '../../../common/config/editorOptions';
import { IDimension } from '../../../common/core/dimension';
import { Range } from '../../../common/core/range';
import { IDiffComputationResult, ILineChange } from '../../../common/diff/legacyLinesDiffComputer';
import { DetailedLineRangeMapping } from '../../../common/diff/rangeMapping';
import { IDiffEditorModel, IDiffEditorViewModel, IDiffEditorViewState } from '../../../common/editorCommon';
import { IAudioCueService } from '../../../../platform/audioCues/browser/audioCueService';
import { IContextKeyService } from '../../../../platform/contextkey/common/contextkey';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
import { IEditorProgressService } from '../../../../platform/progress/common/progress';
import './colors';
import { DelegatingEditor } from './delegatingEditorImpl';
export interface IDiffCodeEditorWidgetOptions {
    originalEditor?: ICodeEditorWidgetOptions;
    modifiedEditor?: ICodeEditorWidgetOptions;
}
export declare class DiffEditorWidget extends DelegatingEditor implements IDiffEditor {
    private readonly _domElement;
    private readonly _parentContextKeyService;
    private readonly _parentInstantiationService;
    private readonly _audioCueService;
    private readonly _editorProgressService;
    static ENTIRE_DIFF_OVERVIEW_WIDTH: number;
    private readonly elements;
    private readonly _diffModel;
    readonly onDidChangeModel: Event<void>;
    get onDidContentSizeChange(): Event<import("../../../common/editorCommon").IContentSizeChangedEvent>;
    private readonly _contextKeyService;
    private readonly _instantiationService;
    private readonly _rootSizeObserver;
    private readonly _sash;
    private readonly _boundarySashes;
    private unchangedRangesFeature;
    private _accessibleDiffViewerShouldBeVisible;
    private _accessibleDiffViewerVisible;
    private _accessibleDiffViewer;
    private readonly _options;
    private readonly _editors;
    private readonly movedBlocksLinesPart;
    get collapseUnchangedRegions(): boolean;
    constructor(_domElement: HTMLElement, options: Readonly<IDiffEditorConstructionOptions>, codeEditorWidgetOptions: IDiffCodeEditorWidgetOptions, _parentContextKeyService: IContextKeyService, _parentInstantiationService: IInstantiationService, codeEditorService: ICodeEditorService, _audioCueService: IAudioCueService, _editorProgressService: IEditorProgressService);
    getViewWidth(): number;
    getContentHeight(): number;
    protected _createInnerEditor(instantiationService: IInstantiationService, container: HTMLElement, options: Readonly<IEditorConstructionOptions>, editorWidgetOptions: ICodeEditorWidgetOptions): CodeEditorWidget;
    private readonly _layoutInfo;
    private _createDiffEditorContributions;
    protected get _targetEditor(): CodeEditorWidget;
    getEditorType(): string;
    onVisible(): void;
    onHide(): void;
    layout(dimension?: IDimension | undefined): void;
    hasTextFocus(): boolean;
    saveViewState(): IDiffEditorViewState;
    restoreViewState(s: IDiffEditorViewState): void;
    createViewModel(model: IDiffEditorModel): IDiffEditorViewModel;
    getModel(): IDiffEditorModel | null;
    setModel(model: IDiffEditorModel | null | IDiffEditorViewModel): void;
    /**
     * @param changedOptions Only has values for top-level options that have actually changed.
     */
    updateOptions(changedOptions: IDiffEditorOptions): void;
    getContainerDomNode(): HTMLElement;
    getOriginalEditor(): ICodeEditor;
    getModifiedEditor(): ICodeEditor;
    setBoundarySashes(sashes: IBoundarySashes): void;
    private readonly _diffValue;
    readonly onDidUpdateDiff: Event<void>;
    get ignoreTrimWhitespace(): boolean;
    get maxComputationTime(): number;
    get renderSideBySide(): boolean;
    /**
     * @deprecated Use `this.getDiffComputationResult().changes2` instead.
     */
    getLineChanges(): ILineChange[] | null;
    getDiffComputationResult(): IDiffComputationResult | null;
    revert(diff: DetailedLineRangeMapping): void;
    private _goTo;
    goToDiff(target: 'previous' | 'next'): void;
    revealFirstDiff(): void;
    accessibleDiffViewerNext(): void;
    accessibleDiffViewerPrev(): void;
    waitForDiff(): Promise<void>;
    mapToOtherSide(): {
        destination: CodeEditorWidget;
        destinationSelection: Range | undefined;
    };
    switchSide(): void;
    exitCompareMove(): void;
    collapseAllUnchangedRegions(): void;
    showAllUnchangedRegions(): void;
}
//# sourceMappingURL=diffEditorWidget.d.ts.map