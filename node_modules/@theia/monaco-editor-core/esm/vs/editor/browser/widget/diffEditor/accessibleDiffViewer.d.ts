/// <reference types="trusted-types" />
import { Disposable } from '../../../../base/common/lifecycle';
import { IObservable, ITransaction } from '../../../../base/common/observable';
import { DiffEditorEditors } from './diffEditorEditors';
import { DetailedLineRangeMapping } from '../../../common/diff/rangeMapping';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation';
import './accessibleDiffViewer.css';
export declare class AccessibleDiffViewer extends Disposable {
    private readonly _parentNode;
    private readonly _visible;
    private readonly _setVisible;
    private readonly _canClose;
    private readonly _width;
    private readonly _height;
    private readonly _diffs;
    private readonly _editors;
    private readonly _instantiationService;
    static _ttPolicy: Pick<TrustedTypePolicy<{
        createHTML: (value: string) => string;
    }>, "name" | "createHTML"> | undefined;
    constructor(_parentNode: HTMLElement, _visible: IObservable<boolean>, _setVisible: (visible: boolean, tx: ITransaction | undefined) => void, _canClose: IObservable<boolean>, _width: IObservable<number>, _height: IObservable<number>, _diffs: IObservable<DetailedLineRangeMapping[] | undefined>, _editors: DiffEditorEditors, _instantiationService: IInstantiationService);
    private readonly model;
    next(): void;
    prev(): void;
    close(): void;
}
//# sourceMappingURL=accessibleDiffViewer.d.ts.map